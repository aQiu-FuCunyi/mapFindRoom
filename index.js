/*  实现地图搜房功能主要是几个步骤：
    1、添加标注聚合点marker（利用接口返回数据用marker来显示相应的数量来模拟聚合效果）；
    2、根据鼠标悬停事件来显示隐藏行政城区边界线（百度地图Polygon方法）；
    3、点击marker或鼠标滚轮事件来扩大地图级别显示所有的点（addEventListener(event: String, handler: Function)）；
    4、通过拖拽地图根据视野来加载对应的点，提高加载点位性能（百度地图GeoUtils）；
    5、给具体的点位添加信息窗体事件。
*/


// 工具函数
const Utils = {
  // 生成随机数
  random: function (n, m) {
    return Math.floor(Math.random() * (m - n + 1) + n)
  }
}




window.lastMyLabel = null // 上次点击的三级楼盘label
window.lastInfoBox = null // 上次打开的三级楼盘信息窗体
window.lastLabelContent = null // 上次点击的三级楼盘label内容（为了解决三角样式问题）
window.lastLabelContentColored = null // 上次点击的三级楼盘label内容（为了解决三角样式问题）
window.circleLabelList = [] // 存数二级聚合点数据  （用于根据地图视野动态加载数据）
window.buildingLabelList = [] // 存数三级聚合点数据 （用于根据地图视野动态加载数据）
window.allPolygonOutline = null // 存储三种层级的多边形轮廓
window.eventFlag = true // eventFlag用于解决：画完圈后，点击三级楼盘label希望移到地图中心 却 触发 mouseDown和mouseUp事件（默认为ture,mouseUp后置为false，点击重画后置为true）
window.onlyOnceFlag = true // onlyOnceFlag用来解决：第一次进商圈就画圈时为了保证三级楼盘此时有数据，在点击画圈之后去请求数据，后续再点进商圈再掉就没必要了，所以加个flag控制一下

//城市城区
var cityAreas = [
  '浦东新区',
  '徐汇',
  '长宁',
  '黄浦',
  '奉贤',
  '金山',
  '松江',
  '闵行',
  '普陀区',
  '青浦',
  '闸北区',
  '虹口',
  '杨浦',
  '嘉定区',
  '宝山'
]
// 一级城区假数据: 根据一级城区名称数组调百度API得到
const firstLevelArea = []
// 二级商圈假数据：张江、唐镇、陆家嘴
const secondLevelCircle = [{
    id: 'sq001',
    name: '张江',
    longitude: 121.608536,
    latitude: 31.210015,
    border: '121.581581,31.227901;121.581725,31.227654;121.581725,31.226789;121.581869,31.225801;121.582013,31.224813;121.582013,31.223948;121.582013,31.222836;121.582013,31.221725;121.582013,31.22086;121.582013,31.219748;121.582156,31.218513;121.582156,31.217895;121.582156,31.216783;121.582156,31.215548;121.582444,31.214683;121.582588,31.213695;121.582731,31.213201;121.582875,31.212336;121.583162,31.211224;121.583306,31.210483;121.58345,31.209371;121.58345,31.208754;121.583737,31.207889;121.584169,31.207024;121.5846,31.206406;121.584743,31.205541;121.584887,31.204924;121.585031,31.204059;121.585031,31.203194;121.585318,31.202329;121.585462,31.201588;121.585606,31.20097;121.58575,31.200229;121.586037,31.19924;121.586181,31.198499;121.586468,31.197881;121.586612,31.19714;121.586756,31.196275;121.586899,31.195534;121.586899,31.195039;121.587043,31.194545;121.587331,31.194175;121.587474,31.193804;121.587474,31.193433;121.587618,31.193062;121.588049,31.192568;121.588193,31.192074;121.588337,31.19158;121.58848,31.191209;121.588624,31.190962;121.588768,31.190344;121.588912,31.190097;121.588912,31.18985;121.589055,31.189479;121.589199,31.189355;121.589199,31.189108;121.589343,31.188985;121.58963,31.188738;121.58963,31.188491;121.589774,31.188491;121.589774,31.188367;121.589774,31.188243;121.589918,31.18812;121.590061,31.187996;121.590061,31.187873;121.590061,31.187626;121.590205,31.187626;121.590205,31.187502;121.590205,31.187255;121.590205,31.187131;121.590205,31.186884;121.590493,31.186761;121.590493,31.186266;121.590493,31.186019;121.590493,31.185772;121.590493,31.185525;121.590493,31.185401;121.59078,31.185031;121.59078,31.184907;121.590924,31.184783;121.591068,31.18466;121.591211,31.184536;121.591642,31.184166;121.59193,31.184166;121.592649,31.183918;121.593223,31.183671;121.594086,31.183548;121.595379,31.183424;121.596386,31.183424;121.597967,31.1833;121.599548,31.183053;121.601129,31.183053;121.602853,31.183053;121.604578,31.183053;121.606303,31.183053;121.60774,31.183053;121.608746,31.183177;121.609609,31.1833;121.610183,31.183424;121.610471,31.183424;121.610615,31.183548;121.610758,31.183548;121.611046,31.183548;121.61119,31.183053;121.611333,31.182312;121.611333,31.181818;121.611477,31.181323;121.611621,31.180458;121.611621,31.179717;121.611764,31.178852;121.612052,31.178234;121.612052,31.177492;121.612196,31.176998;121.612339,31.17638;121.612339,31.175886;121.612339,31.175762;121.612483,31.175638;121.612627,31.175144;121.612771,31.174897;121.613058,31.174897;121.613346,31.174897;121.61392,31.175021;121.61507,31.175391;121.616508,31.175762;121.618089,31.17638;121.620101,31.176874;121.621826,31.177369;121.623407,31.177739;121.625419,31.178357;121.627,31.178604;121.628581,31.178975;121.629731,31.179099;121.63088,31.179222;121.631743,31.179222;121.632461,31.17947;121.633324,31.179593;121.633611,31.179593;121.63433,31.179717;121.634761,31.17984;121.63548,31.179964;121.636055,31.180211;121.636486,31.180335;121.63663,31.180458;121.636773,31.180582;121.636773,31.180829;121.636773,31.181076;121.636773,31.181323;121.63663,31.181941;121.636486,31.182188;121.636198,31.182806;121.635623,31.183795;121.635049,31.184907;121.63433,31.186513;121.633611,31.187996;121.633036,31.189232;121.632461,31.190591;121.63203,31.191703;121.631887,31.192815;121.631743,31.194298;121.631743,31.195534;121.631743,31.196522;121.631743,31.198005;121.631743,31.198993;121.631743,31.199982;121.631599,31.200847;121.631168,31.201711;121.631024,31.202453;121.63088,31.202947;121.630593,31.203441;121.630449,31.203688;121.630306,31.204059;121.629874,31.204677;121.629731,31.205171;121.629587,31.205665;121.629299,31.206283;121.629156,31.206653;121.629012,31.207148;121.628725,31.207642;121.628725,31.207889;121.628581,31.208259;121.628437,31.209001;121.62815,31.209865;121.628006,31.210483;121.627718,31.211101;121.627431,31.211595;121.627287,31.211966;121.627287,31.212336;121.627,31.21283;121.626712,31.213077;121.626281,31.213448;121.626137,31.213695;121.625994,31.214189;121.625562,31.21456;121.625275,31.215178;121.624844,31.215795;121.624844,31.216166;121.624556,31.216536;121.624413,31.216907;121.624413,31.217401;121.628581,31.216783;121.628581,31.217031;121.628581,31.217278;121.628581,31.217401;121.628581,31.217772;121.628581,31.218142;121.628581,31.218636;121.628581,31.219131;121.628581,31.219748;121.624125,31.221107;121.623838,31.221601;121.623694,31.222219;121.62355,31.222589;121.623407,31.22296;121.623407,31.223207;121.623407,31.22333;121.623263,31.223577;121.623263,31.223701;121.623119,31.223948;121.623119,31.224072;121.623119,31.224319;121.623119,31.224442;121.622975,31.224813;121.622688,31.22506;121.622688,31.225554;121.622544,31.225924;121.622544,31.226295;121.6224,31.226418;121.6224,31.226665;121.622257,31.226913;121.622113,31.22716;121.621969,31.227407;121.621969,31.22753;121.621969,31.227654;121.621969,31.227777;121.621826,31.228024;121.621682,31.228148;121.621682,31.228271;121.621538,31.228518;121.621538,31.228765;121.621394,31.228889;121.621394,31.229012;121.621394,31.229136;121.621394,31.229259;121.621251,31.229383;121.621251,31.22963;121.621107,31.229877;121.621107,31.23;121.620963,31.230124;121.620963,31.230247;121.620963,31.230371;121.620963,31.230618;121.620963,31.230741;121.620963,31.230865',
    count: 3
  },
  {
    id: 'sq002',
    name: '唐镇',
    longitude: 121.662285,
    latitude: 31.220922,
    border: '121.65862,31.224535;121.658548,31.224535;121.658476,31.224473;121.658369,31.224257;121.658297,31.224164;121.658117,31.223855;121.657973,31.223577;121.657758,31.2233;121.657686,31.223083;121.657506,31.222805;121.657327,31.222528;121.657147,31.222311;121.657039,31.222126;121.656895,31.22191;121.656824,31.221725;121.656752,31.221478;121.656644,31.221292;121.6565,31.221045;121.656392,31.220706;121.656213,31.220397;121.656033,31.220057;121.655889,31.219717;121.65571,31.219408;121.655602,31.219161;121.655494,31.218883;121.655458,31.21876;121.655422,31.218606;121.65535,31.218482;121.65535,31.218389;121.655314,31.218297;121.655314,31.218266;121.655278,31.218204;121.655278,31.218173;121.655278,31.218142;121.655278,31.21805;121.655638,31.217864;121.656177,31.217556;121.657075,31.217;121.658153,31.216413;121.659447,31.21561;121.66074,31.214714;121.661962,31.213726;121.663148,31.2128;121.663148,31.2128;121.664261,31.211966;121.665375,31.211163;121.666381,31.210483;121.667352,31.209896;121.66807,31.209495;121.668537,31.209279;121.668861,31.209093;121.669112,31.209032;121.669256,31.20897;121.669292,31.20897;121.669364,31.208939;121.6694,31.208908;121.669436,31.208877;121.669472,31.208877;121.669508,31.208877;121.669508,31.208846;121.669579,31.208815;121.669579,31.208815;121.669723,31.208846;121.669939,31.209032;121.670047,31.209155;121.67037,31.209371;121.670729,31.209618;121.671089,31.209835;121.671556,31.210143;121.672274,31.210607;121.672957,31.211008;121.673784,31.211626;121.674394,31.212058;121.675221,31.212676;121.675868,31.213232;121.676119,31.213448;121.676442,31.213695;121.676694,31.21388;121.67673,31.213911;121.676766,31.213911;121.676766,31.213911;121.67673,31.213942;121.676658,31.214004;121.676658,31.214097;121.676586,31.214128;121.676586,31.21422;121.67655,31.214344;121.676442,31.214529;121.676371,31.214683;121.676227,31.214961;121.676047,31.215239;121.675939,31.215548;121.675796,31.215919;121.675544,31.216258;121.675365,31.216536;121.675149,31.216814;121.674861,31.217216;121.674646,31.217586;121.674466,31.217926;121.674251,31.218297;121.674035,31.218667;121.673927,31.219069;121.673819,31.219408;121.673748,31.219625;121.673748,31.219872;121.673676,31.219964;121.673676,31.220026;121.673676,31.220119;121.67364,31.220181;121.67364,31.220211;121.67364,31.220242;121.67364,31.220304;121.673568,31.220335;121.673532,31.220397;121.673532,31.220428;121.673496,31.220489;121.673496,31.22052;121.673424,31.220551;121.673424,31.220613;121.673388,31.220644;121.673352,31.220675;121.673352,31.220706;121.673352,31.220736;121.673316,31.220798;121.67328,31.220798;121.67328,31.220829;121.67328,31.220891;121.67328,31.220891;121.67328,31.220953;121.67328,31.221014;121.67328,31.221231;121.67328,31.221447;121.67328,31.221694;121.67328,31.221879;121.67328,31.222188;121.67328,31.222373;121.67328,31.222589;121.67328,31.222682;121.67328,31.222744;121.67328,31.222775;121.67328,31.222836;121.67328,31.222867;121.67328,31.222898;121.67328,31.222929;121.67328,31.222991;121.67328,31.223022;121.67328,31.223052;121.67328,31.223052;121.673137,31.223176;121.672813,31.223238;121.672167,31.223423;121.671664,31.223547;121.671484,31.223608;121.671232,31.223639;121.671053,31.22367;121.670981,31.223732;121.670945,31.223732',
    count: 4
  },
  {
    id: 'sq003',
    name: '陆家嘴',
    longitude: 121.517448,
    latitude: 31.242176,
    border: '121.526533,31.250748;121.52639,31.250748;121.525958,31.250748;121.525671,31.250748;121.525383,31.250748;121.524809,31.250748;121.524377,31.250748;121.523802,31.250748;121.523228,31.250748;121.522653,31.250748;121.522221,31.250748;121.521359,31.250748;121.520784,31.250748;121.520065,31.250748;121.519491,31.250748;121.518628,31.250748;121.518053,31.250748;121.517047,31.250748;121.516472,31.250748;121.515897,31.250748;121.515322,31.250748;121.515035,31.250748;121.514604,31.250748;121.514173,31.250748;121.513741,31.250748;121.513454,31.250748;121.513166,31.250748;121.512879,31.250748;121.512448,31.250748;121.51216,31.250748;121.512017,31.250748;121.511729,31.250748;121.511585,31.250748;121.511154,31.250625;121.511011,31.250625;121.510723,31.250625;121.510436,31.250501;121.510148,31.250501;121.510004,31.250501;121.509573,31.250378;121.509286,31.250255;121.508998,31.250131;121.508855,31.250131;121.508567,31.250131;121.508567,31.250008;121.50828,31.249884;121.508136,31.249761;121.507992,31.249761;121.507705,31.249514;121.507561,31.249514;121.507417,31.24939;121.507274,31.24939;121.507274,31.249267;121.506986,31.249143;121.506842,31.249143;121.506555,31.24902;121.506411,31.248896;121.506267,31.248896;121.506124,31.248773;121.506124,31.248649;121.50598,31.248649;121.508855,31.248526;121.508711,31.247538;121.508567,31.247414;121.508423,31.247414;121.50828,31.247291;121.507992,31.247044;121.507849,31.24692;121.50483,31.247661;121.507561,31.246673;121.507417,31.24655;121.507417,31.246426;121.507274,31.246303;121.50713,31.246303;121.50713,31.246179;121.506986,31.246056;121.506986,31.245932;121.506842,31.245809;121.506699,31.245685;121.506555,31.245438;121.506411,31.245438;121.506411,31.245315;121.506267,31.245191;121.506124,31.245068;121.506124,31.244944;121.50598,31.244944;121.505836,31.244697;121.505693,31.244697;121.505693,31.244574;121.502674,31.245315;121.502531,31.245191;121.502531,31.245068;121.502387,31.244944;121.502243,31.244821;121.502243,31.244697;121.502243,31.244574;121.502099,31.24445;121.502099,31.244327;121.501956,31.244203;121.501956,31.24408;121.501956,31.243956;121.501812,31.243709;121.501812,31.243586;121.501812,31.243462;121.501812,31.243339;121.501812,31.243215;121.501812,31.243092;121.501812,31.242968;121.501812,31.242845;121.501812,31.242721;121.501812,31.242474;121.501956,31.242351;121.501956,31.242227;121.501956,31.241857;121.501956,31.241733;121.502099,31.24161;121.502243,31.241363;121.502387,31.24124;121.502531,31.240993;121.502531,31.240622;121.502818,31.240499;121.502818,31.240375;121.502962,31.240252;121.503249,31.239881;121.503393,31.239757;121.503537,31.239634;121.503537,31.23951;121.503824,31.239263;121.503968,31.23914;121.504112,31.238769;121.504399,31.238646;121.504686,31.238275;121.504974,31.237905;121.505118,31.237905;121.505549,31.237534;121.505549,31.237287;121.505836,31.23704;121.506124,31.236917;121.506411,31.236793;121.506555,31.23667;121.506842,31.236423;121.50713,31.236176;121.507417,31.236052;121.507561,31.235929;121.507849,31.235805;121.507992,31.235682;121.508136,31.235558;121.508423,31.235435;121.508567,31.235311;121.508711,31.235188;121.508998,31.235064;121.509142,31.234941;121.50943,31.234694;121.509717,31.23457;121.510004,31.234323;121.510148,31.2342;121.510292,31.234076;121.510579,31.233829;121.510723,31.233706;121.510867,31.233582;121.511011,31.233459;121.511298,31.233212;121.511585,31.233088;121.511729,31.232965;121.512017,31.232841;121.51216,31.232841;121.512304,31.232718;121.512448,31.232594;121.512879,31.232347;121.512879,31.232224;121.513166,31.232224;121.51331,31.231977;121.513454,31.231977;121.513454,31.231606;121.513598,31.231483;121.513741,31.231359;121.513885,31.231236;121.514029,31.231112;121.514029,31.230989;121.514316,31.230865;121.514316,31.230741;121.51446,31.230494;121.51446,31.230371;121.514604,31.230247;121.514748,31.230124;121.514891,31.229877;121.514891,31.22963;121.515179,31.229259;121.515179,31.229012;121.515322,31.228765;121.515466,31.228518;121.51561,31.228395;121.515754,31.228148;121.515754,31.228024;121.515897,31.227901;121.516041,31.227654;121.516185,31.22753;121.516329,31.227407;121.516329,31.22716;121.516329,31.227036;121.516616,31.226665;121.516616,31.226542;121.51676,31.226171;121.516903,31.226048;121.517047,31.225554;121.517047,31.225307;121.517191,31.225307;121.517335,31.224936;121.517335,31.224813;121.517335,31.224442;121.517335,31.224195;121.517622,31.223825;121.517766,31.223577;121.517766,31.223454;121.517766,31.223083;121.51791,31.22296;121.51791,31.222713;121.518053,31.222466;121.518197,31.222219;121.518197,31.222095;121.518341,31.221848;121.518341,31.221601;121.518484,31.221354;121.518484,31.221107;121.518484,31.220983;121.518484,31.220736;121.518484,31.220613;121.518484,31.220366;121.518484,31.220242;121.518484,31.219995;121.518484,31.219872;121.518484,31.219748;121.518484,31.219625;121.518484,31.219501;121.518484,31.219254;121.518484,31.219131;121.518484,31.218883;121.518484,31.21876;121.518484,31.218513;121.518484,31.218389;121.518484,31.218142;121.518484,31.218019;121.518484,31.217895;121.518484,31.217648;121.518341,31.217525;121.518341,31.217401;121.518197,31.217278;121.518197,31.217154;121.518053,31.216907;121.518053,31.216783;121.51791,31.216536;121.51791,31.216289;121.517766,31.216042;121.517622,31.215919;121.517622,31.215795;121.517478,31.215548;121.517335,31.215425;121.517335,31.215301;121.517335,31.215178;121.517191,31.215178;121.517191,31.21493;121.517047,31.214807;121.517047,31.214683;121.517047,31.214436;121.516903,31.214313;121.516903,31.214189;121.51676,31.214066;121.51676,31.213942;121.516616,31.213695;121.516616,31.213572;121.516472,31.213325;121.516329,31.213201;121.516329,31.212954;121.516185,31.21283;121.516185,31.213077;121.516185,31.213201;121.516185,31.213325;121.516185,31.213448;121.516185,31.213572;121.516185,31.213695;121.516329,31.213819;121.516329,31.213942;121.516329,31.214066;121.516329,31.214189;121.516472,31.214313;121.516616,31.21456;121.51676,31.214683;121.516903,31.214807;121.516903,31.21493;121.517191,31.215178;121.517335,31.215301;121.517478,31.215425;121.517622,31.215548;121.51791,31.215548;121.518053,31.215672;121.518197,31.215795;121.518341,31.215795;121.518628,31.216042;121.518916,31.216042;121.519059,31.216042;121.519347,31.216042;121.519491,31.216042;121.519634,31.216166;121.519778,31.216289;121.519922,31.216289;121.520209,31.216289;121.520353,31.216289;121.52064,31.216289;121.521072,31.216289;121.521359,31.216289;121.52179,31.216413;121.522078,31.216413;121.522509,31.216536;121.52294,31.216536;121.523515,31.21666;121.523659,31.21666;121.52409,31.21666;121.524809,31.216783;121.52524,31.216783;121.525671,31.216907;121.525958,31.216907;121.52639,31.217031;121.526964,31.217031;121.527396,31.217154;121.527827,31.217154;121.528258,31.217401;121.528977,31.217525;121.529552,31.217772;121.530126,31.217895;121.530558,31.218019;121.531133,31.218389;121.531564,31.218513;121.532139,31.218883;121.532282,31.219007;121.533001,31.219254;121.533145,31.219378;121.533289,31.219501;121.53372,31.219625;121.534007,31.219748;121.534295,31.219872;121.534438,31.219995;121.53487,31.220242;121.535301,31.220613;121.535588,31.22086;121.536163,31.221354;121.536451,31.221601;121.537169,31.222219;121.5376,31.222589;121.537888,31.222836;121.538319,31.223207;121.53875,31.223701;121.539325,31.224195;121.539469,31.224442;121.540044,31.224936;121.540188,31.225307;121.540475,31.226171;121.540619,31.226665;121.540906,31.22716;121.541194,31.227901;121.541337,31.228889;121.541481,31.22963;121.541625,31.230494;121.541625,31.230865;121.541912,31.231483;121.541912,31.231977;121.542056,31.232471;121.5422,31.233088;121.5422,31.233582;121.5422,31.234076;121.5422,31.234447;121.5422,31.234941;121.5422,31.235929;121.5422,31.236546;121.5422,31.237164;121.5422,31.238152;121.5422,31.238893;121.5422,31.239634;121.5422,31.240128;121.5422,31.240499;121.5422,31.241116;121.5422,31.241486;121.5422,31.24198;121.5422,31.242474;121.542056,31.243092;121.541912,31.243462;121.541912,31.243709;121.541769,31.243956;121.541625,31.244327;121.541481,31.244821;121.541481,31.244944;121.541337,31.245068;121.541194,31.245315;121.541194,31.245562;121.541194,31.245809;121.54105,31.246056;121.540762,31.246303;121.540762,31.246426;121.540762,31.246673;121.540619,31.246797;121.540475,31.247044;121.540331,31.247167;121.540188,31.247291;121.540188,31.247538;121.540044,31.247661;121.5399,31.247908;121.539756,31.247908;121.539613,31.248032;121.539469,31.248155;121.539325,31.248279;121.539181,31.248402;121.539038,31.248402;121.53875,31.248649;121.538606,31.248649;121.538463,31.248649;121.538175,31.248773;121.537888,31.248773;121.5376,31.248896;121.537169,31.248896;121.537025,31.248896;121.536594,31.249143;121.536451,31.249143;121.536163,31.249143;121.535876,31.249267;121.535588,31.249267;121.535013,31.249637;121.53487,31.249637;121.534438,31.249637;121.533863,31.249761;121.533576,31.249761;121.533145,31.249761;121.532714,31.249761;121.53257,31.249884;121.532139,31.249884;121.531851,31.250008;121.531708,31.250008;121.531276,31.250008;121.531133,31.250131;121.530989,31.250131;121.530845,31.250131;121.530558,31.250131;121.53027,31.250255;121.530126,31.250255;121.529983,31.250255;121.529839,31.250255;121.529695,31.250255;121.529552,31.250501;121.529408,31.250501;121.529264,31.250501;121.52912,31.250501;121.528977,31.250501;121.528833,31.250501;121.528689,31.250501;121.528402,31.250501;121.528258,31.250501;121.528114,31.250501;121.527971,31.250501;121.527827,31.250501;121.527683,31.250501',
    count: 4
  }
]
// 三级楼盘假数据: 楼盘一----楼盘十二
const thirdLevelBuilding = [{
    name: '楼盘一',
    code: '01',
    longitude: '121.522006',
    latitude: '31.239117',
    num: '100',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘二',
    code: '02',
    longitude: '121.526066',
    latitude: '31.245855',
    num: '200',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘三',
    code: '03',
    longitude: '121.533935',
    latitude: '31.234632',
    num: '300',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘四',
    code: '04',
    longitude: '121.55068',
    latitude: '31.225492',
    num: '400',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘五金科路地铁站',
    code: '05',
    longitude: '121.608551',
    latitude: '31.209994',
    num: '500',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘六',
    code: '06',
    longitude: '121.594158',
    latitude: '31.208012',
    num: '600',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘七',
    code: '07',
    longitude: '121.600805',
    latitude: '31.216552',
    num: '700',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘八',
    code: '08',
    longitude: '121.603993',
    latitude: '31.213874',
    num: '800',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘九',
    code: '09',
    longitude: '121.603454',
    latitude: '31.207975',
    num: '900',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘十',
    code: '010',
    longitude: '121.613479',
    latitude: '31.207758',
    num: '1000',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘十一',
    code: '011',
    longitude: '121.629253',
    latitude: '31.220096',
    num: '1100',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  },
  {
    name: '楼盘十二',
    code: '012',
    longitude: '121.627025',
    latitude: '31.216823',
    num: '1200',
    price: `${Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10}`
  }
]



/*** 界面元素 ***/
const UI = {
  drawBtn: document.getElementById('draw'), // 画圈按钮
  drawAgain: document.getElementById('drawAgain'), // 重画按钮
  exitBtn: document.getElementById('exit'), // 退出画圈按钮
  ul: document.getElementById('data') // 画圈完成后的数据展示列表
}



/*** 交互逻辑涉及的数据 ***/
var isInDrawing = false; // 是否处于画圈状态下
var isMouseDown = false; // 是否处于鼠标左键按下状态下
var polyPointArray = [] // 存储画出折线点的数组
var lastPolyLine = null // 上次操作画出的折线
var polygonAfterDraw = null // 画圈完成后生成的多边形


window.lastMyLabel = null // 上次点击的三级楼盘label
window.lastInfoBox = null // 上次打开的三级楼盘信息窗体
window.secondCircleLabelList = [] // 存数二级标注聚合点数据  （用于根据地图视野动态加载数据）
window.thirdBuildingLabelList = [] // 存数三级标注聚合点数据 （用于根据地图视野动态加载数据）
window.polygonArr = [] // 存当前显示一级城区的点（例如浦东新区由三块分离的小城区组成）

window.eventFlag = true // eventFlag用于解决：画完圈后，点击三级楼盘label希望移到地图中心 却 触发 mouseDown和mouseUp事件（默认为ture,mouseUp后置为false，点击重画后置为true）
window.onlyOnceFlag = true // onlyOnceFlag用来解决：第一次进商圈就画圈时为了保证三级楼盘此时有数据，在点击画圈之后去请求数据，后续再点进商圈再掉就没必要了，所以加个flag控制一下


window.map = initMap() // 初始化地图，绑定地图放缩、拖拽事件，绑定画圈相关事件
initfirstLevelArea() // 初始化一级假数据




// 初始化地图
function initMap() {
  var map = new BMap.Map('allMap', {
    enableMapClick: false,
    minZoom: 11,
    maxZoom: 19
  })
  var point = new BMap.Point(121.48169, 31.235682) // 上海市中心点
  map.centerAndZoom(point, 12) // 地图中心点和初始化放缩层级
  map.enableScrollWheelZoom(true) // 开启鼠标滚轮缩放功能。仅对PC上有效
  map.addControl(
    new BMap.ScaleControl({
      anchor: BMAP_ANCHOR_TOP_LEFT
    })
  ) // 左上角，添加比例尺;
  map.addControl(
    new BMap.NavigationControl({
      type: BMAP_NAVIGATION_CONTROL_ZOOM,
      anchor: BMAP_ANCHOR_BOTTOM_RIGHT,
      offset: new BMap.Size(20, 20)
    })
  ) // 右下角，添加放大缩小控件

  // 监听地图级别缩放事件
  map.addEventListener('zoomend', function () {
    showThreeLevelsByZoom() // 根据地图当前zoom展示不同层级区域
  })
  // 停止拖拽地图时触发事件
  map.addEventListener('dragend', function () {
    showThreeLevelsByZoom() // 根据地图当前zoom展示不同层级区域
  })

  bindDrawEvents(map) // 绑定画圈找房相关事件
  return map
}

// 初始化一级假数据
function initfirstLevelArea() {
  var myGeo = new BMap.Geocoder()
  var countAsync = 0 // 用于判断获取一级城区数据异步任务是否都完成的计数
  $.each(cityAreas, function (index, item) {
    ;
    (function (item) {
      var a = {}
      a.id = index
      a.name = item
      a.count = Utils.random(4, 9) // 套数：随机数
      a.price = Math.floor(Utils.random(4, 9) * Math.random() * 10) / 10 // 价格：随机数
      const tempBoundary = new BMap.Boundary()
      myGeo.getPoint(
        '上海市' + item,
        function (point) {
          // 解析地址
          // 如果地址定位成功，则以地址所在的坐标点Point为参数调用回调函数。否则，回调函数的参数为null
          if (point) {
            a.longitude = point.lng
            a.latitude = point.lat
          } else {
            console.error('一级城区' + item + '未定位成功')
          }
          // 把城区的边界轮廓也解析出来
          tempBoundary.get(item, function (rs) {
            const count = rs.boundaries.length // 行政城区的点有多少个
            if (count === 0) {
              alert('未能获取当前输入行政城区')
              return
            }
            // 一个一级城区可能会由多个圈组成：如浦东新区，所以要遍历访问rs.boundaries[i]，视情况加上
            /* for (var i = 0; i < count; i++) {
              var tempply = new BMap.Polygon(rs.boundaries[i], {
                strokeWeight: 2, //	边线的宽度，以像素为单位
                strokeColor: 'rgb(66, 133, 244)', // 边线颜色
                fillColor: 'rgba(53, 126, 244,0.1)' // 填充颜色
              }) // 建立多边形覆盖物
              window.map.addOverlay(tempply) // 添加覆盖物
              window.allPolygonOutline.push(tempply)
              tempply.enableMassClear()
            } */
            a.border = rs.boundaries ? rs.boundaries[0] : '';
            ++countAsync
            // 一级城区解析完毕后添加聚合点
            if (countAsync === cityAreas.length) {
              showLabels(firstLevelArea, 'first') // 展示一级城区
              console.log('一级城区假数据firstLevelArea', firstLevelArea)
            }
          })

        },
        '上海市'
      )
      firstLevelArea.push(a)
    })(item)
  })
}


// 根据地图当前zoom展示不同层级区域
function showThreeLevelsByZoom() {
  var zoomLevel = map.getZoom() // 获取地图缩放级别
  if (isInDrawing) {
    // 画圈过程完成后会setViewport调整视野中心，这种情况zoom级别改变和放缩会触发本函数，直接return，不执行后续操作
    return
  }
  if (zoomLevel == 11 || zoomLevel == 12 || zoomLevel == 13) {
    showLabels(firstLevelArea, 'first') // 绘制一级城区聚合点
  } else if (zoomLevel == 14 || zoomLevel == 15) {
    // 展示二级商圈（第一次直接绘制聚合点，之后使用上次存过的聚合点）
    if (window.circleLabelList.length > 0) {
      addViewLabel(window.circleLabelList)
    } else {
      showLabels(secondLevelCircle, 'second') // 绘制二级商圈聚合点
    }
  } else {
    // 展示三级楼盘（第一次直接绘制聚合点，之后使用上次存过的聚合点）
    if (window.buildingLabelList.length > 0) {
      addViewLabel(window.buildingLabelList)
    } else {
      showMapBuildings() // 绘制三级楼盘聚合点
    }
  }
}

// （通用）绘制一级城区/二级商圈聚合点位
function showLabels(fakeData, type) {
  map.clearOverlays() // 清除地图覆盖物
  // 为了提高百度地图性能，本篇例子点位全用label来加载点位
  $.each(fakeData, function (index, data) {
    const point = new BMap.Point(data.longitude, data.latitude)
    // 自定义label样式
    const tpl =
      `<div class="bubble bubble-1" data-longitude="${data.longitude}" data-latitude="${data.latitude}" data-id="${data.id}">
          <p class="name" title="${data.name}">${data.name}</p>
          ${
            type === 'first'
              ? `<p>${data.price}万</p>
                 <p>${data.count}套</p>`
              : `<p>${data.count}个楼盘</p>`
          }
          
        </div>`
    var myLabel = new BMap.Label(tpl, {
      position: point, // label 在此处添加点位位置信息
      offset: new BMap.Size(-10, -10)
    })
    myLabel.setStyle({
      width: '92px', // 宽
      height: '92px', // 高度
      border: '0', // 边
      background: '#457cf4', // 背景颜色
      borderRadius: '50%',
      cursor: 'pointer',
      zIndex: 2
    })
    myLabel.setTitle(data.name) // 悬浮提示文字
    if (type === 'second') {
      window.circleLabelList.push(myLabel) // 存储二级聚合点
    }
    map.addOverlay(myLabel) // 添加点位

    // 当鼠标悬停在本label上时显示多边形边界
    myLabel.addEventListener('mouseover', function (event) {
      myLabel.setStyle({
        background: 'rgba(240,65,52,0.9)'
      }) // 修改覆盖物背景颜色
      getBoundary(data.border)
    })

    // 当鼠标离开本label时删除多边形边界
    myLabel.addEventListener('mouseout', function (event) {
      myLabel.setStyle({
        background: '#457cf4',
        zIndex: 4
      })
      clearAllPolygon() // 清楚地图上的所有多边形边界
    })

    // 当鼠标点击本label时
    myLabel.addEventListener('click', function (result) {
      map.setCenter(result.point) // 重新设置地图中心点后再放大
      map.setZoom(type === 'first' ? 14 : 16) // 放大到相应层级
    })
  })
  if (type === 'second') {
    addViewLabel(window.circleLabelList)
  }
}

// （通用）多边形边界绘制
function getBoundary(border = '') {
  if (border) {
    const tempPolygon = new BMap.Polygon(border, {
      strokeWeight: 2, //	边线的宽度，以像素为单位
      strokeColor: 'rgb(66, 133, 244)', // 边线颜色
      // fillColor: 'rgba(53, 126, 244,0.1)' //填充颜色
      fillColor: '#6699CC' //填充颜色

    }); // 建立多边形覆盖物
    window.map.addOverlay(tempPolygon); // 添加覆盖物
    tempPolygon.enableMassClear();
    window.allPolygonOutline = tempPolygon
  }
}


//绘制三级详细楼盘聚合点
function showMapBuildings() {
  map.clearOverlays()
  window.buildingLabelList = []
  $.each(thirdLevelBuilding, function (index, data) {
    var point = new BMap.Point(data.longitude, data.latitude)
    //  自定义label样式(默认三角)
    var tplLabelStyle = `<p class="bubble-3 bubble" data-longitude="${data.longitude}" data-latitude="${data.latitude}" data-id="${data.id}">
                          <span class="num">${data.name}  ${data.price}万  ${data.num}套</span>
                          <i class="arrow-up"></i>
                        </p>`

    var myLabel = new BMap.Label(tplLabelStyle, {
      position: point, // label 在此处添加点位位置信息
      // offset: new BMap.Size(-12, -15)
    })
    myLabel.setStyle({
      position: 'absolute',
      display: 'inline',
      // border: "0px solid rgb(255, 0, 0)",
      whiteSpace: 'nowrap',
      color: 'rgb(255, 255, 255)',
      textAlign: 'center',
      transform: 'translate(-50%, -80%)',
      borderRadius: '24px',
      border: '1px solid #3072f6',
      minWidth: '40px',
      height: '24px',
      lineHeight: '24px',
      cursor: 'pointer',
      backgroundColor: '#3072f6',
      padding: '0 6px'
    })
    myLabel.setTitle(data.name)
    window.buildingLabelList.push(myLabel)

    //信息窗口模板
    var tpl = `<div class='infoBox' data-longitude='${data.longitude}' data-latitude='${data.latitude}' data-id='${data.code}'>
                  <div class='infoArea'>
                      <p class='name'>${data.name}</p>
                      <p class='num'>均价<span class='red'>${data.num}</span>万元/平</p>
                  </div>
                  <i class='arrow'></i>
              </div>`
    var infoBox = new BMapLib.InfoBox(map, tpl, {
      boxStyle: {
        width: '160px',
        minHeight: '50px',
        marginBottom: '40px',
        backgroundColor: 'white'
      }
    })
    /* 
    boxStyle: {
      width: '160px',
      minHeight: '50px',
      marginBottom: '40px',
      backgroundColor: 'white'
    },
    closeIconMargin: "15px 10px 4px 4px",
    closeIconUrl: "img/1.png",
    enableAutoPan: false,
    align: INFOBOX_AT_TOP */

    //鼠标悬停在本label上时
    myLabel.addEventListener('mouseover', function () {
      myLabel.setStyle({
        background: 'rgb(252, 96, 90)',
        border: 'rgb(252, 96, 90)'
      }) // 修改覆盖物背景颜色
      infoBox.open(point)
    })
    // 当鼠标离开本label时
    myLabel.addEventListener('mouseout', function () {
      // 从本label离开时，如果 没有点击过label 或者 如果本次离开的的不是上次点击的label，则将本label置为初始样式，信息窗关闭
      if (
        !window.lastMyLabel ||
        window.lastMyLabel.getPosition().lng !== myLabel.getPosition().lng ||
        window.lastMyLabel.getPosition().lat !== myLabel.getPosition().lat
      ) {
        myLabel.setStyle({
          background: '#3072f6',
          border: '#3072f6'
        }) //修改覆盖物背景颜色
        infoBox.close()
      }
    })
    //鼠标点击本label时
    myLabel.addEventListener('click', function () {
      /* 如果本次点击的label不是上次点击的lable，则把上次label置为初始样式，信息窗关闭*/
      if (
        window.lastMyLabel &&
        window.lastMyLabel.getPosition().lng !== myLabel.getPosition().lng &&
        window.lastMyLabel.getPosition().lat !== myLabel.getPosition().lat
      ) {
        window.lastMyLabel.setStyle({
          background: '#3072f6',
          border: '#3072f6'
        })
        window.lastMyLabel.setContent(window.lastLabelContent)
        if (window.lastInfoBox) {
          //判断上一个窗体是否存在，若存在则执行close
          window.lastInfoBox.close()
        }
      }
      map.setCenter(point) // 重新设置地图中心点后再放大
      infoBox.open(point)
      myLabel.setStyle({
        background: 'rgb(252, 96, 90)',
        border: 'rgb(252, 96, 90)'
      }) //修改覆盖物背景颜色
      // 自定义label样式(高亮三角)
      let tplLabelActiveColored = `<p class="bubble-3 bubble" data-longitude="${data.longitude}" data-latitude="${data.latitude}" data-id="${data.id}">
                          <span class="num">${data.name}  ${data.price}万  ${data.num}套</span>
                          <i class="arrow-up arrow-up-colored"></i>
                        </p>`
      myLabel.setContent(tplLabelActiveColored)

      window.lastMyLabel = myLabel
      window.lastInfoBox = infoBox
      window.lastLabelContent = tplLabelStyle
      window.lastLabelContentColored = tplLabelActiveColored
    })
  })
  // 当前不在画圈状态下就加载三级楼盘的可视范围点
  if (!isInDrawing) {
    addViewLabel(window.buildingLabelList) //加载可视范围点
  }
}

//根据地图视野动态加载数据，当数据多时此方法用来提高地图加载性能
//由于此篇模拟点位数据较少，视野加载不明显，当数据多时可直观感觉（这种做法导致画完圈退出后，再移动地图后，画的圈会消失，要想不消失，就不能用这种做法）
function addViewLabel(labels) {
  map.clearOverlays()
  for (var i = 0; i < labels.length; i++) {
    var result = BMapLib.GeoUtils.isPointInRect(
      labels[i].point,
      map.getBounds()
    )
    if (result == true) {
      map.addOverlay(labels[i])
    } else {
      map.removeOverlay(labels[i])
    }
  }
}

// 清除地图上的所有多边形边界
function clearAllPolygon() {
  const tempPolygon = window.allPolygonOutline
  if (tempPolygon) {
    tempPolygon.setPath(new Array())
    map.removeOverlay(tempPolygon) //清除折线数据
    window.allPolygonOutline = null
  }
}

// 绑定画圈找房相关事件
function bindDrawEvents(map) {
  //点击画圈找房按钮
  UI.drawBtn.addEventListener('click', function (e) {
    let zoom = map.getZoom()
    if (zoom < 14) {
      UI.ul.innerHTML = '请放大地图后使用画圈找房'
      setTimeout(function () {
        UI.ul.innerHTML = ''
      }, 500)
      return
    }
    map.clearOverlays() //  点击画圈后清除地图上的覆盖物
    map.disableDragging() // 	禁用地图拖拽
    map.disableScrollWheelZoom() //  禁用滚轮放大缩小
    map.disableDoubleClickZoom() //  禁用双击放大
    map.disableKeyboard() //  禁用键盘操作
    map.setDefaultCursor('crosshair') //  设置地图默认的鼠标指针样式。参数cursor应符合CSS的cursor属性规范
    //设置标志位进入画圈状态
    isInDrawing = true
    window.eventFlag = true
    // 如果是第一次点击画圈找房
    if (window.onlyOnceFlag) {
      showMapBuildings() //绘制三级楼盘绘制聚合点(为了解决：在二级商圈画圈时还没有楼盘数据问题)
      window.onlyOnceFlag = false
    }
  })
  // 点击重画按钮
  UI.drawAgain.addEventListener('click', function (e) {
    if (isInDrawing) {
      //清空地图上画的折线和圈
      map.removeOverlay(polygonAfterDraw)
      map.removeOverlay(lastPolyLine)
      polyPointArray = []
      lastPolyLine = null
      isMouseDown = false
      eventFlag = true
      map.clearOverlays()
      //禁止地图移动点击等操作
      map.disableDragging()
      map.disableScrollWheelZoom()
      map.disableDoubleClickZoom()
      map.disableKeyboard()
      map.setDefaultCursor('crosshair')
      //更新dom结构
      UI.ul.innerHTML = ''
    }
  })
  //点击退出画圈按钮
  UI.exitBtn.addEventListener('click', function (e) {
    //恢复地图移动点击等操作
    map.enableDragging()
    map.enableScrollWheelZoom()
    map.enableDoubleClickZoom()
    map.enableKeyboard()
    map.setDefaultCursor('default')
    //设置标志位退出画圈状态
    isInDrawing = false
    showThreeLevelsByZoom() // 根据地图当前zoom展示不同层级区域
    //更新dom结构
    UI.ul.innerHTML = ''
  })
  //为地图绑定鼠标按下事件(开始画圈)
  map.addEventListener('mousedown', function (e) {
    //如果处于画圈状态下,清空上次画圈的数据结构,设置isMouseDown进入画圈鼠标按下状态
    if (isInDrawing && window.eventFlag) {
      //清空地图上画的折线和圈
      map.removeOverlay(polygonAfterDraw)
      map.removeOverlay(lastPolyLine)
      polyPointArray = []
      lastPolyLine = null
      isMouseDown = true
    }
  })

  //为地图绑定鼠标移动事件(触发画图)
  map.addEventListener('mousemove', function (e) {
    //如果处于鼠标按下状态,才能进行画操作
    if (isMouseDown) {
      //将鼠标移动过程中采集到的路径点加入数组保存
      polyPointArray.push(e.point)
      //除去上次的画线
      if (lastPolyLine) {
        map.removeOverlay(lastPolyLine)
      }
      //根据已有的路径数组构建画出的折线
      var polylineOverlay = new window.BMap.Polyline(polyPointArray, {
        strokeColor: '#00ae66',
        strokeOpacity: 1,
        enableClicking: false
      })
      //添加新的画线到地图上
      map.addOverlay(polylineOverlay)
      //更新上次画线条
      lastPolyLine = polylineOverlay
    }
  })

  //为地图绑定鼠标抬起事件(画圈完成)
  map.addEventListener('mouseup', function (e) {
    //如果处于画圈状态下 且 鼠标是按下状态
    if (isInDrawing && isMouseDown) {
      //退出画线状态
      isMouseDown = false
      window.eventFlag = false

      //添加多边形覆盖物,设置为禁止点击
      var polygon = new window.BMap.Polygon(polyPointArray, {
        strokeColor: '#00ae66',
        strokeOpacity: 1,
        fillColor: '#00ae66',
        fillOpacity: 0.3,
        enableClicking: false
      })
      map.addOverlay(polygon)
      map.setViewport(polyPointArray) // 画圈完成后调整视野将圈移到视野中心
      //保存多边形,用于后续删除该多边形
      polygonAfterDraw = polygon
      // 得到包含在画的圈中的第三级楼盘label数组
      let labelInPolygonArray = caculateEstateContainedInPolygon(polygon)
      labelInPolygonArray.forEach(item => {
        map.addOverlay(item) // 添加包含在画的圈中的第三级楼盘label
      })
      //计算房屋对于多边形的包含情况
      var ret = caculateEstateContainedInPolygon(polygonAfterDraw)
      //更新dom结构
      UI.ul.innerHTML = ''
      var fragment = document.createDocumentFragment()
      for (var i = 0; i < ret.length; i++) {
        var li = document.createElement('li')
        li.innerText ?
          (li.innerText = ret[i]) :
          (li.textContent = ret[i].getTitle())
        fragment.appendChild(li)
      }
      UI.ul.appendChild(fragment)

      //恢复地图移动点击等操作
      map.enableDragging()
      map.enableScrollWheelZoom()
      map.enableDoubleClickZoom()
      map.enableKeyboard()
      map.setDefaultCursor('default')
    }
  })
}

//计算地图上点的包含状态
function caculateEstateContainedInPolygon(polygon) {
  //得到多边形的点数组
  var pointArray = polygon.getPath()
  //获取多边形的外包矩形
  var bound = polygon.getBounds()
  // 在多边形内的label数组
  var labelInPolygonArray = []
  //计算每个点是否包含在该多边形内
  for (var i = 0; i < window.thirdBuildingLabelList.length; i++) {
    //该marker的坐标点
    var labelPoint = window.thirdBuildingLabelList[i].getPosition()

    if (isPointInPolygon(labelPoint, bound, pointArray)) {
      labelInPolygonArray.push(window.thirdBuildingLabelList[i])
    }
  }

  return labelInPolygonArray // 返回在多边形内的label数组
  /* var estateListAfterDrawing = labelInPolygonArray.map(function(item){
        return item.getLabel().getContent()
    })
    return estateListAfterDrawing */
}

//判定一个点是否包含在多边形内
function isPointInPolygon(point, bound, pointArray) {
  //首先判断该点是否在外包矩形内，如果不在直接返回false
  if (!bound.containsPoint(point)) {
    return false
  }
  //如果在外包矩形内则进一步判断
  //该点往右侧发出的射线和矩形边交点的数量,若为奇数则在多边形内，否则在外
  var crossPointNum = 0
  for (var i = 0; i < pointArray.length; i++) {
    //获取2个相邻的点
    var p1 = pointArray[i]
    var p2 = pointArray[(i + 1) % pointArray.length]
    //如果点相等直接返回true
    if (
      (p1.lng === point.lng && p1.lat === point.lat) ||
      (p2.lng === point.lng && p2.lat === point.lat)
    ) {
      return true
    }
    //如果point在2个点所在直线的下方则continue
    if (point.lat < Math.min(p1.lat, p2.lat)) {
      continue
    }
    //如果point在2个点所在直线的上方则continue
    if (point.lat >= Math.max(p1.lat, p2.lat)) {
      continue
    }
    //有相交情况:2个点一上一下,计算交点
    //特殊情况2个点的横坐标相同
    var crossPointLng
    if (p1.lng === p2.lng) {
      crossPointLng = p1.lng
    } else {
      //计算2个点的斜率
      var k = (p2.lat - p1.lat) / (p2.lng - p1.lng)
      //得出水平射线与这2个点形成的直线的交点的横坐标
      crossPointLng = (point.lat - p1.lat) / k + p1.lng
    }
    //如果crossPointLng的值大于point的横坐标则算交点(因为是右侧相交)
    if (crossPointLng > point.lng) {
      crossPointNum++
    }
  }
  //如果是奇数个交点则点在多边形内
  return crossPointNum % 2 === 1
}